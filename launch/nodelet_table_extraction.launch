<launch>
  <arg name="vis" default="true" />
  <arg name="frames" default="true" />
  <arg name="pcd" default="false" />

  <!-- if we don't load drivers, let's load frames -->
  <include if="$(arg frames)" file="$(find rgbd_launch)/launch/kinect_frames.launch">
      <arg name="camera" value="camera" />
  </include>


  <!-- launch the nodelet manager -->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen"/>  


  <!-- pcd reader  -->
  <group ns="pcd_reader" if="$(arg pcd)">
    <node name="pcd_publisher" pkg="pcl_ros" type="pcd_to_pointcloud"
          args="$(find nodelet_pcl_demo)/launch/table_rotated.pcd 0.05">
      <remap from="cloud_pcd" to="/camera/depth/points" />
      <param name="frame_id" value="camera_depth_optical_frame" />
    </node>
  </group>
  

  <!-- crop box filtering: -->
  <group ns="box_filter">
    <node pkg="nodelet" type="nodelet" name="cropbox" args="load pcl/CropBox /pcl_manager" output="screen">
      <remap from="~input" to="/camera/depth/points" />
      <rosparam>
        min_x: -0.75
        max_x: 0.5
        min_y: -0.6
        max_y: 0.1
        min_z: 0.5
        max_z: 2.0
      </rosparam>
    </node>
  </group>

  
  <!-- voxel downsampling, and transformation -->
  <group ns="cloud_downsampler">
    <node pkg="nodelet" type="nodelet" name="voxel" args="load pcl/VoxelGrid /pcl_manager" output="screen">
      <remap from="~input" to="/box_filter/cropbox/output" />
      <rosparam>
        leaf_size: 0.01
        filter_field_name: z
        filter_limit_min: -10.0
        filter_limit_max: 10.0
      </rosparam>
    </node>
  </group>
  

  <!-- table extraction -->
  <group ns="normal_segmentation">
    <node pkg="nodelet" type="nodelet" name="segmentation" args="load pcl/SACSegmentation /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <param name="model_type" value="0" type="int" />
      <param name="distance_threshold" value="0.02" type="double" />
    </node>
  </group>

  <!-- extract indices from table extraction-->
  <group ns="extract_indices" >
    <node pkg="nodelet" type="nodelet" name="extract_inliers" args="load pcl/ExtractIndices /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <remap from="~indices" to="/normal_segmentation/segmentation/inliers" />
      <param name="approximate_sync" value="true" />
    </node>
    <node pkg="nodelet" type="nodelet" name="extract_outliers" args="load pcl/ExtractIndices /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <remap from="~indices" to="/normal_segmentation/segmentation/inliers" />
      <param name="negative" value="true" />
      <param name="approximate_sync" value="true" />
    </node>
  </group>

  

  <!-- add another pass-through filter that removes points below the planar
       extraction, will also start a node that offers a service to update the
       dynamic reconfigure settings of this nodelet based on the output of the planar extraction -->
  <group ns="table_cutoff" >
    <node pkg="nodelet_pcl_demo" type="table_cutoff_settings.py" name="table_cutoff_settings" output="screen"
          respawn="true" />
    <node pkg="nodelet" type="nodelet" name="cutoff" args="load pcl/PassThrough /pcl_manager" output="screen">
      <remap from="~input" to="/cloud_downsampler/voxel/output" />
      <rosparam>
        input_frame: table_frame
        filter_field_name: y
        filter_limit_min: -3.0
        filter_limit_max: 0.0
      </rosparam>
    </node>
  </group>


  <!-- perform statistical outlier removal of the non-table cloud -->
  <group ns="outlier">
    <node pkg="nodelet" type="nodelet" name="cutoff" args="load pcl/StatisticalOutlierRemoval /pcl_manager" output="screen">
      <remap from="~input" to="/table_cutoff/cutoff/output" />
      <rosparam>
        mean_k: 10
        stddev: 0.01
      </rosparam>
    </node>
  </group>


  <!-- now let's extract the clusters of whatever is left on the table -->
  <node pkg="nodelet_pcl_demo" name="cluster_extraction" type="multi_robot_tracker" output="screen" />
  
  <node pkg="rviz" type="rviz" respawn="false" name="rviz" if="$(arg vis)"
        args="-d $(find nodelet_pcl_demo)/launch/nodelet_demo.rviz" />

</launch>
